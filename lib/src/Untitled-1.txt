const float2 Unit2 = { 1.0f, 1.0f };
const float3 Unit3 = { 1.0f, 1.0f, 1.0f };
const float3 Zero3 = { 0.0f, 0.0f, 0.0f };
const int SAMPLE_COUNT = 500;

float2 TextureDim;
float4 TopBottomRadius; // Top, Bottom, Top^2, Bottom^2
float3 RayleighScattering;
float3 MieExtinction;
float3 AbsorptionExtinction;
float3 RMAExpTerm[2];
float3 RMAExpScale[2];
float3 RMALinearTerm[2];
float3 RMAConstTerm[2];
float3 RMAWidth;

float ClampDistance(float d)
{
    return max(d, 0.0f);
}

float SafeSqrt(float sqr)
{
    return sqrt(max(sqr, 0.0f));
}

float3 DistanceToTopAtmosphereBoundary(float4 MU_R_Sqr)
{
    float discriminant = MU_R_Sqr.w * (MU_R_Sqr.z - 1.0f) + TopBottomRadius.z;
    return ClampDistance(- MU_R_Sqr.y * MU_R_Sqr.x + SafeSqrt(discriminant)).xxx;
}

float3 GetLayerDensity(float3 altitude, int index)
{
    float3 density = RMAExpTerm[index] * exp(RMAExpScale[index] * altitude) + RMALinearTerm[index] * altitude + RMAConstTerm[index];
    return clamp(density, Zero3, Unit3);
}

float3 GetProfileDensity(float3 altitude)
{
    float3 ratio = clamp(sign(altitude - RMAWidth), Zero3, Unit3);
    return lerp(GetLayerDensity(altitude, 0), GetLayerDensity(altitude, 1), ratio);
}

float4 GetRMuFromTransmittanceTextureUv(float2 UV)
{
    float4 MU_R_Sqr;
    float2 X_MU_R = (UV - Unit2 / TextureDim * 0.5f) / (Unit2 - Unit2 / TextureDim);
    float H = sqrt(TopBottomRadius.z - TopBottomRadius.w);
    float rho = H * X_MU_R.y;
    MU_R_Sqr.y = sqrt(rho * rho + TopBottomRadius.w);
    float d_min = TopBottomRadius.x - MU_R_Sqr.y;
    float d_max = rho + H;
    float d = d_min + X_MU_R.x * (d_max - d_min);
    MU_R_Sqr.x = clamp(d == 0.0f ? 1.0f : (H * H - rho * rho - d * d) / (2.0f * MU_R_Sqr.y * d), -1.0f, 1.0f);
    MU_R_Sqr.zw = MU_R_Sqr.xy * MU_R_Sqr.xy;
    return MU_R_Sqr;
}

float3 ComputeOpticalLengthToTopAtmosphereBoundary(float4 MU_R_Sqr)
{
    float3 dx = DistanceToTopAtmosphereBoundary(MU_R_Sqr) / SAMPLE_COUNT;
    float3 result = Zero3;
    for (int i = 0; i <= SAMPLE_COUNT; ++i)
    {
        float3 d_i = dx * i;
        float3 r_i = sqrt(d_i * d_i + d_i * MU_R_Sqr.x * MU_R_Sqr.y * 2.0f + MU_R_Sqr.www);
        float3 y_i = GetProfileDensity(r_i - TopBottomRadius.yyy);
        result += y_i * dx * (i == 0 || i == SAMPLE_COUNT ? 0.5f : 1.0f);
    }
    return result;
}

float3 ComputeTransmittanceToTopAtmosphereBoundary(float4 MU_R_Sqr)
{
    float3 OpticalLength = ComputeOpticalLengthToTopAtmosphereBoundary(MU_R_Sqr);
    float3 Transmittance = RayleighScattering * OpticalLength.x + 
        MieExtinction * OpticalLength.y + 
        AbsorptionExtinction * OpticalLength.z;
    return exp(-Transmittance);
}

float4 ComputeTransmittanceToTopAtmosphereBoundaryTexture(float2 UV : TEXCOORD0) : COLOR0
{
    float4 MU_R_Sqr = GetRMuFromTransmittanceTextureUv(UV);
    return float4(ComputeTransmittanceToTopAtmosphereBoundary(MU_R_Sqr), 1.0f);
}